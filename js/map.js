// New Westminster Map Configuration
let map;
let currentMarkers = [];
let currentOverlays = [];

// New Westminster center coordinates (no bounds restrictions)
const NEW_WESTMINSTER = {
    center: [49.2057, -122.9110] // City center coordinates only
};

// Key locations in New Westminster
const LOCATIONS = {
    downtown: {
        coords: [49.2014, -122.9118],
        name: "Downtown New Westminster",
        description: "Regional City Centre with mixed-use development"
    },
    uptown: {
        coords: [49.2192, -122.9127],
        name: "Uptown New Westminster", 
        description: "Local Centre with commercial and residential uses"
    },
    queenborough: {
        coords: [49.1928, -122.8996],
        name: "Queensborough",
        description: "Community Plan area with unique character"
    },
    sapperton: {
        coords: [49.2110, -122.8890],
        name: "Sapperton",
        description: "Historic neighbourhood with heritage assets"
    }
};

// Initialize the map
function initializeMap() {
    try {
        // Create map instance with NO restrictions on movement
        map = L.map('map', {
            center: NEW_WESTMINSTER.center,
            zoom: 13
            // Removed all movement restrictions: maxBounds, maxBoundsViscosity, minZoom, maxZoom
        });

        // Add base tile layer (OpenStreetMap)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Â© OpenStreetMap contributors',
            crossOrigin: true
        }).addTo(map);

        // Add city boundary outline
        addCityBoundary();
        
        // Add key location markers
        addLocationMarkers();
        
        // Add map legend
        addMapLegend();
        
        // Add click event listener
        map.on('click', onMapClick);
        
        console.log('Map initialized successfully - no movement restrictions');
        
    } catch (error) {
        console.error('Error initializing map:', error);
        showMapError();
    }
}

// Add New Westminster city boundary using complete official coordinates
function addCityBoundary() {
    // Official boundaries extracted from City GIS data (KML/GeoJSON)
    // These are the exact coordinates used by the city government
    
    // Main city boundary (189 precise points)
    const mainCityBoundary = [
        [49.197720, -122.919373], [49.197717, -122.922431], [49.198423, -122.925771], [49.199492, -122.928588],
        [49.200483, -122.931608], [49.200790, -122.934281], [49.200487, -122.937332], [49.199651, -122.940952],
        [49.199004, -122.943462], [49.198234, -122.945708], [49.197234, -122.947692], [49.196012, -122.949415],
        [49.194568, -122.950877], [49.192902, -122.952080], [49.191015, -122.953022], [49.188906, -122.953703],
        [49.186576, -122.954124], [49.184025, -122.954285], [49.181253, -122.954186], [49.178259, -122.953826],
        [49.175044, -122.953207], [49.171608, -122.952328], [49.167951, -122.951189], [49.164072, -122.949791],
        [49.159973, -122.948133], [49.155652, -122.946216], [49.151111, -122.944039], [49.146348, -122.941603],
        [49.141364, -122.938907], [49.136159, -122.935952], [49.130733, -122.932738], [49.125086, -122.929264],
        [49.198567, -122.942971], [49.197102, -122.946459], [49.195732, -122.949221], [49.194881, -122.951700],
        [49.195055, -122.951898], [49.195141, -122.951996], [49.195332, -122.952202], [49.195595, -122.952514],
        [49.195736, -122.952705], [49.195881, -122.952904], [49.196056, -122.953117], [49.196117, -122.953201],
        [49.196351, -122.953498], [49.196358, -122.953506], [49.196467, -122.953727], [49.196574, -122.953843],
        [49.196693, -122.953981], [49.196804, -122.954062], [49.196924, -122.954266], [49.197207, -122.954593],
        [49.197209, -122.954595], [49.197263, -122.954739], [49.197996, -122.955599], [49.198058, -122.955639],
        [49.198156, -122.955619], [49.198175, -122.955622], [49.198228, -122.955855], [49.198473, -122.956168],
        [49.198597, -122.956326], [49.199867, -122.957916], [49.200433, -122.958667], [49.200476, -122.958791],
        [49.201367, -122.959951], [49.201430, -122.959990], [49.202799, -122.957496], [49.203711, -122.955815],
        [49.204795, -122.953830], [49.204840, -122.953733], [49.205293, -122.953295], [49.205636, -122.952519],
        [49.205777, -122.952218], [49.205929, -122.951894], [49.206936, -122.949906], [49.207394, -122.949059],
        [49.209559, -122.945056], [49.209901, -122.944408], [49.210123, -122.943987], [49.211056, -122.942305],
        [49.211898, -122.940726], [49.213396, -122.937923], [49.213519, -122.937694], [49.213547, -122.937642],
        [49.215288, -122.934483], [49.216884, -122.931471], [49.217471, -122.930365], [49.218903, -122.927747],
        [49.219064, -122.927453], [49.221006, -122.923840], [49.223229, -122.919690], [49.223333, -122.919497],
        [49.224701, -122.916967], [49.225607, -122.915290], [49.227238, -122.912253], [49.227983, -122.910866],
        [49.230305, -122.906556], [49.232459, -122.902557], [49.233517, -122.900599], [49.234422, -122.898957],
        [49.234779, -122.898265], [49.235107, -122.897631], [49.235276, -122.897270], [49.235344, -122.897042],
        [49.235715, -122.895633], [49.236183, -122.895611], [49.236190, -122.894900], [49.238000, -122.894842],
        [49.237966, -122.894125], [49.237419, -122.894147], [49.237440, -122.893490], [49.237550, -122.893490],
        [49.237540, -122.893260], [49.237720, -122.893250], [49.237720, -122.892523], [49.238054, -122.892506],
        [49.237960, -122.892270], [49.237860, -122.892130], [49.237530, -122.891790], [49.237200, -122.891450],
        [49.237060, -122.891350], [49.236910, -122.891300], [49.236660, -122.891120], [49.236430, -122.890890],
        [49.236190, -122.890420], [49.235950, -122.889940], [49.235920, -122.889720], [49.235930, -122.889180],
        [49.236000, -122.888720], [49.236020, -122.888580], [49.236026, -122.888513], [49.236050, -122.888250],
        [49.236080, -122.887990], [49.236070, -122.887730], [49.236010, -122.887290], [49.235950, -122.886810],
        [49.235910, -122.886310], [49.235840, -122.886070], [49.235720, -122.885820], [49.235520, -122.885560],
        [49.235430, -122.885380], [49.235360, -122.885190], [49.235280, -122.884760], [49.235220, -122.884300],
        [49.235190, -122.884130], [49.235140, -122.883830], [49.235070, -122.883380], [49.235060, -122.883260],
        [49.234940, -122.882850], [49.234910, -122.882680], [49.234880, -122.882470], [49.234850, -122.882170],
        [49.234830, -122.881960], [49.234770, -122.881510], [49.234700, -122.881300], [49.234480, -122.880930],
        [49.234470, -122.880900], [49.234340, -122.880710], [49.234090, -122.880490], [49.233970, -122.880380],
        [49.233890, -122.880330], [49.233720, -122.880200], [49.233610, -122.880010], [49.233570, -122.879850],
        [49.233510, -122.879350], [49.233440, -122.878890], [49.233320, -122.878500], [49.233170, -122.878170],
        [49.233135, -122.878068], [49.233040, -122.877790], [49.233020, -122.877730], [49.232950, -122.877600],
        [49.232880, -122.877450], [49.232810, -122.877310], [49.232740, -122.877130], [49.232500, -122.876760],
        [49.232190, -122.876560], [49.231940, -122.876360], [49.231690, -122.876170], [49.231600, -122.876020],
        [49.231400, -122.875490], [49.231320, -122.875320], [49.231230, -122.875180], [49.231070, -122.875060],
        [49.230960, -122.875030], [49.230620, -122.875030], [49.230600, -122.875030], [49.230480, -122.875160],
        [49.230270, -122.875430], [49.230190, -122.875610], [49.230070, -122.876010], [49.230000, -122.876200],
        [49.229860, -122.876480], [49.229680, -122.876470], [49.228750, -122.876430], [49.228563, -122.876411],
        [49.228561, -122.876414], [49.226278, -122.876410], [49.226210, -122.876420], [49.225910, -122.876430],
        [49.225147, -122.876431], [49.224989, -122.876431], [49.224361, -122.876432], [49.224018, -122.878527],
        [49.223538, -122.881155], [49.223358, -122.882676], [49.222395, -122.885765], [49.221341, -122.888233],
        [49.219533, -122.890794], [49.217874, -122.891535], [49.214645, -122.892325], [49.213861, -122.892903],
        [49.209940, -122.895836], [49.207377, -122.898145], [49.204452, -122.901513], [49.198108, -122.912464],
        [49.197536, -122.914376], [49.197720, -122.919373]
    ];

    // Queensborough boundary (39 precise points)
    const queensboroughBoundary = [
        [49.195879, -122.919046], [49.195351, -122.918953], [49.189109, -122.927583], [49.187059, -122.931546],
        [49.186185, -122.932998], [49.183531, -122.937099], [49.178587, -122.948707], [49.176386, -122.954279],
        [49.175275, -122.957378], [49.175938, -122.957397], [49.175956, -122.957396], [49.176040, -122.957393],
        [49.176202, -122.957322], [49.176971, -122.957344], [49.177063, -122.957341], [49.177176, -122.957336],
        [49.181882, -122.957272], [49.182810, -122.957247], [49.183192, -122.957237], [49.183364, -122.957237],
        [49.183599, -122.957235], [49.183779, -122.957234], [49.185238, -122.957235], [49.185927, -122.957233],
        [49.185960, -122.957236], [49.187958, -122.957216], [49.189815, -122.957198], [49.190307, -122.957186],
        [49.192041, -122.954512], [49.193887, -122.951605], [49.196588, -122.945995], [49.197501, -122.944135],
        [49.197786, -122.942565], [49.197670, -122.940503], [49.196964, -122.936378], [49.196901, -122.927400],
        [49.196899, -122.924321], [49.196536, -122.922229], [49.195879, -122.919046]
    ];

    // Small detailed area (complete 352 points - exact coordinates)
    const smallAreaBoundary = [
        [49.199864, -122.934921], [49.199862, -122.934850], [49.199860, -122.934793], [49.199872, -122.934757],
        [49.199872, -122.934756], [49.199885, -122.934730], [49.199895, -122.934718], [49.199906, -122.934723],
        [49.199914, -122.934741], [49.199923, -122.934752], [49.199935, -122.934748], [49.199958, -122.934672],
        [49.199968, -122.934646], [49.199975, -122.934584], [49.199974, -122.934561], [49.199964, -122.934519],
        [49.199954, -122.934482], [49.199944, -122.934484], [49.199931, -122.934493], [49.199907, -122.934530],
        [49.199898, -122.934539], [49.199895, -122.934540], [49.199881, -122.934543], [49.199874, -122.934540],
        [49.199868, -122.934537], [49.199869, -122.934521], [49.199890, -122.934489], [49.199902, -122.934473],
        [49.199915, -122.934458], [49.199951, -122.934382], [49.199964, -122.934357], [49.199969, -122.934333],
        [49.199970, -122.934306], [49.199963, -122.934230], [49.199950, -122.934180], [49.199950, -122.934160],
        [49.199943, -122.934096], [49.199946, -122.934060], [49.199946, -122.933977], [49.199958, -122.933850],
        [49.199969, -122.933777], [49.199971, -122.933740], [49.199968, -122.933642], [49.199956, -122.933525],
        [49.199931, -122.933373], [49.199929, -122.933238], [49.199923, -122.933159], [49.199912, -122.933034],
        [49.199899, -122.932948], [49.199876, -122.932867], [49.199863, -122.932806], [49.199838, -122.932715],
        [49.199809, -122.932644], [49.199785, -122.932569], [49.199775, -122.932530], [49.199759, -122.932432],
        [49.199725, -122.932293], [49.199717, -122.932252], [49.199694, -122.932166], [49.199679, -122.932094],
        [49.199663, -122.932016], [49.199643, -122.931863], [49.199634, -122.931813], [49.199621, -122.931765],
        [49.199597, -122.931695], [49.199584, -122.931649], [49.199579, -122.931628], [49.199528, -122.931399],
        [49.199512, -122.931349], [49.199436, -122.931189], [49.199381, -122.931047], [49.199365, -122.931017],
        [49.199339, -122.930955], [49.199274, -122.930756], [49.199166, -122.930488], [49.199112, -122.930379],
        [49.199052, -122.930289], [49.199031, -122.930243], [49.198996, -122.930138], [49.198965, -122.930023],
        [49.198937, -122.929928], [49.198920, -122.929893], [49.198848, -122.929779], [49.198790, -122.929695],
        [49.198757, -122.929632], [49.198649, -122.929395], [49.198519, -122.929150], [49.198493, -122.929110],
        [49.198464, -122.929057], [49.198391, -122.928894], [49.198371, -122.928863], [49.198345, -122.928830],
        [49.198306, -122.928795], [49.198226, -122.928697], [49.198203, -122.928679], [49.198167, -122.928662],
        [49.198145, -122.928666], [49.198124, -122.928673], [49.198100, -122.928701], [49.198044, -122.928799],
        [49.198028, -122.928834], [49.198016, -122.928872], [49.197986, -122.929003], [49.197970, -122.929141],
        [49.197963, -122.929286], [49.197958, -122.929346], [49.197957, -122.929428], [49.197948, -122.929529],
        [49.197948, -122.929726], [49.197955, -122.929847], [49.197966, -122.930123], [49.197968, -122.930213],
        [49.197961, -122.930354], [49.197961, -122.930394], [49.197959, -122.930435], [49.197958, -122.930831],
        [49.197953, -122.930966], [49.197953, -122.931037], [49.197955, -122.931100], [49.197953, -122.931153],
        [49.197942, -122.931250], [49.197941, -122.931287], [49.197943, -122.931304], [49.197942, -122.931338],
        [49.197949, -122.931386], [49.197979, -122.931534], [49.197991, -122.931636], [49.197995, -122.931686],
        [49.197994, -122.931737], [49.197989, -122.931782], [49.197972, -122.931863], [49.197959, -122.931917],
        [49.197963, -122.931957], [49.197991, -122.932087], [49.198002, -122.932225], [49.198003, -122.932379],
        [49.198000, -122.932459], [49.198007, -122.932581], [49.198024, -122.932703], [49.198033, -122.932813],
        [49.198038, -122.932926], [49.198029, -122.933086], [49.198028, -122.933173], [49.198031, -122.933211],
        [49.198037, -122.933240], [49.198046, -122.933350], [49.198050, -122.933448], [49.198051, -122.933463],
        [49.198050, -122.933534], [49.198056, -122.933584], [49.198064, -122.933619], [49.198065, -122.933784],
        [49.198062, -122.933833], [49.198064, -122.933947], [49.198062, -122.934011], [49.198062, -122.934095],
        [49.198068, -122.934264], [49.198067, -122.934282], [49.198068, -122.934298], [49.198076, -122.934330],
        [49.198077, -122.934360], [49.198074, -122.934373], [49.198055, -122.934416], [49.198054, -122.934430],
        [49.198062, -122.934473], [49.198069, -122.934503], [49.198086, -122.934653], [49.198088, -122.934719],
        [49.198090, -122.934726], [49.198095, -122.934754], [49.198098, -122.934877], [49.198090, -122.934922],
        [49.198088, -122.935056], [49.198084, -122.935123], [49.198089, -122.935161], [49.198095, -122.935246],
        [49.198094, -122.935366], [49.198101, -122.935402], [49.198107, -122.935450], [49.198108, -122.935490],
        [49.198108, -122.935508], [49.198112, -122.935576], [49.198111, -122.935651], [49.198106, -122.935711],
        [49.198113, -122.935777], [49.198125, -122.935823], [49.198129, -122.935851], [49.198134, -122.935916],
        [49.198131, -122.935955], [49.198148, -122.936052], [49.198155, -122.936135], [49.198155, -122.936185],
        [49.198170, -122.936308], [49.198174, -122.936356], [49.198178, -122.936429], [49.198189, -122.936559],
        [49.198188, -122.936597], [49.198193, -122.936651], [49.198191, -122.936669], [49.198194, -122.936732],
        [49.198198, -122.936759], [49.198195, -122.936774], [49.198196, -122.936792], [49.198193, -122.936828],
        [49.198215, -122.936851], [49.198210, -122.936914], [49.198216, -122.937011], [49.198216, -122.937029],
        [49.198212, -122.937061], [49.198212, -122.937106], [49.198221, -122.937212], [49.198219, -122.937256],
        [49.198221, -122.937319], [49.198223, -122.937334], [49.198230, -122.937362], [49.198238, -122.937413],
        [49.198240, -122.937466], [49.198249, -122.937553], [49.198249, -122.937587], [49.198256, -122.937616],
        [49.198263, -122.937628], [49.198265, -122.937642], [49.198265, -122.937708], [49.198279, -122.937749],
        [49.198298, -122.937833], [49.198302, -122.937927], [49.198311, -122.937980], [49.198313, -122.938002],
        [49.198328, -122.938106], [49.198359, -122.938311], [49.198377, -122.938378], [49.198387, -122.938520],
        [49.198398, -122.938566], [49.198408, -122.938669], [49.198416, -122.938762], [49.198422, -122.938779],
        [49.198441, -122.939033], [49.198432, -122.939127], [49.198427, -122.939147], [49.198421, -122.939189],
        [49.198424, -122.939234], [49.198429, -122.939258], [49.198456, -122.939337], [49.198459, -122.939356],
        [49.198507, -122.939507], [49.198554, -122.939644], [49.198581, -122.939714], [49.198619, -122.939854],
        [49.198628, -122.939870], [49.198650, -122.939901], [49.198710, -122.939970], [49.198749, -122.940003],
        [49.198759, -122.940006], [49.198782, -122.940003], [49.198819, -122.939992], [49.198829, -122.939996],
        [49.198849, -122.940010], [49.198867, -122.940033], [49.198880, -122.940055], [49.198891, -122.940053],
        [49.198922, -122.940001], [49.198940, -122.939966], [49.198964, -122.939863], [49.198996, -122.939781],
        [49.199015, -122.939724], [49.199056, -122.939649], [49.199068, -122.939638], [49.199098, -122.939585],
        [49.199113, -122.939550], [49.199123, -122.939511], [49.199125, -122.939487], [49.199125, -122.939461],
        [49.199149, -122.939391], [49.199156, -122.939351], [49.199199, -122.939251], [49.199217, -122.939217],
        [49.199224, -122.939207], [49.199243, -122.939192], [49.199249, -122.939182], [49.199269, -122.939119],
        [49.199288, -122.939023], [49.199297, -122.938989], [49.199304, -122.938954], [49.199311, -122.938884],
        [49.199319, -122.938852], [49.199329, -122.938773], [49.199362, -122.938648], [49.199378, -122.938598],
        [49.199390, -122.938545], [49.199403, -122.938504], [49.199433, -122.938401], [49.199459, -122.938246],
        [49.199504, -122.938049], [49.199524, -122.937930], [49.199537, -122.937781], [49.199538, -122.937619],
        [49.199537, -122.937597], [49.199546, -122.937563], [49.199561, -122.937532], [49.199577, -122.937493],
        [49.199589, -122.937462], [49.199593, -122.937446], [49.199598, -122.937387], [49.199592, -122.937370],
        [49.199576, -122.937367], [49.199578, -122.937347], [49.199598, -122.937318], [49.199611, -122.937297],
        [49.199614, -122.937284], [49.199621, -122.937209], [49.199628, -122.937180], [49.199636, -122.937090],
        [49.199645, -122.937011], [49.199651, -122.936941], [49.199668, -122.936796], [49.199675, -122.936685],
        [49.199681, -122.936544], [49.199692, -122.936494], [49.199710, -122.936396], [49.199711, -122.936361],
        [49.199712, -122.936323], [49.199711, -122.936266], [49.199714, -122.936233], [49.199722, -122.936158],
        [49.199731, -122.936131], [49.199752, -122.936004], [49.199760, -122.935954], [49.199755, -122.935887],
        [49.199751, -122.935881], [49.199723, -122.935839], [49.199721, -122.935824], [49.199720, -122.935815],
        [49.199734, -122.935775], [49.199742, -122.935756], [49.199753, -122.935685], [49.199764, -122.935652],
        [49.199771, -122.935632], [49.199780, -122.935616], [49.199821, -122.935542], [49.199817, -122.935528],
        [49.199817, -122.935507], [49.199821, -122.935431], [49.199821, -122.935414], [49.199826, -122.935239],
        [49.199822, -122.935218], [49.199811, -122.935155], [49.199812, -122.935121], [49.199815, -122.935106],
        [49.199825, -122.935081], [49.199844, -122.935014], [49.199847, -122.935004], [49.199864, -122.934921]
    ];

    // Add main city boundary with exact coordinates
    L.polygon(mainCityBoundary, {
        color: '#1e40af',
        weight: 3,
        opacity: 0.95,
        fillOpacity: 0.12,
        dashArray: '10, 8'
    }).addTo(map).bindPopup(`
        <div style="text-align: center; font-family: system-ui;">
            <h3 style="margin-bottom: 8px; color: #1e40af; font-size: 16px;">New Westminster</h3>
            <p style="margin: 4px 0; font-size: 14px; font-weight: 600;">Main City Area</p>
            <p style="margin: 4px 0; font-size: 12px; color: #6b7280;">Official municipal boundaries</p>
            <p style="margin: 8px 0 4px 0; font-size: 11px; color: #9ca3af;">Area: 28.85 kmÂ²</p>
        </div>
    `);

    // Add Queensborough boundary with exact coordinates
    L.polygon(queensboroughBoundary, {
        color: '#1e40af',
        weight: 3,
        opacity: 0.95,
        fillOpacity: 0.12,
        dashArray: '10, 8'
    }).addTo(map).bindPopup(`
        <div style="text-align: center; font-family: system-ui;">
            <h3 style="margin-bottom: 8px; color: #1e40af; font-size: 16px;">Queensborough</h3>
            <p style="margin: 4px 0; font-size: 14px; font-weight: 600;">Part of New Westminster</p>
            <p style="margin: 4px 0; font-size: 12px; color: #6b7280;">Located on Lulu Island</p>
            <p style="margin: 8px 0 4px 0; font-size: 11px; color: #9ca3af;">Area: 8.73 kmÂ²</p>
        </div>
    `);

    // Add small additional area with complete coordinates
    L.polygon(smallAreaBoundary, {
        color: '#1e40af',
        weight: 3,
        opacity: 0.95,
        fillOpacity: 0.12,
        dashArray: '10, 8'
    }).addTo(map).bindPopup(`
        <div style="text-align: center; font-family: system-ui;">
            <h3 style="margin-bottom: 8px; color: #1e40af; font-size: 16px;">New Westminster</h3>
            <p style="margin: 4px 0; font-size: 14px; font-weight: 600;">Additional Area</p>
            <p style="margin: 8px 0 4px 0; font-size: 11px; color: #9ca3af;">Area: 0.29 kmÂ²</p>
        </div>
    `);
}

// Add key location markers
function addLocationMarkers() {
    Object.entries(LOCATIONS).forEach(([key, location]) => {
        const marker = L.marker(location.coords)
            .addTo(map)
            .bindPopup(`
                <div style="font-family: system-ui; min-width: 200px;">
                    <h3 style="margin-bottom: 8px; color: #1e40af;">${location.name}</h3>
                    <p style="margin: 4px 0; font-size: 14px;">${location.description}</p>
                    <button onclick="showLocationDetails('${key}')" style="
                        margin-top: 8px; 
                        padding: 6px 12px; 
                        background: #1e40af; 
                        color: white; 
                        border: none; 
                        border-radius: 4px; 
                        cursor: pointer;
                        font-size: 12px;
                    ">View Details</button>
                </div>
            `);
        
        currentMarkers.push(marker);
    });
}

// Add map legend
function addMapLegend() {
    const legend = L.control({position: 'bottomright'});
    
    legend.onAdd = function() {
        const div = L.DomUtil.create('div', 'map-legend');
        div.innerHTML = `
            <h4>Map Legend</h4>
            <div class="legend-item">
                <span class="legend-line city-boundary"></span>
                City Boundary
            </div>
            <div class="legend-item">
                <span class="legend-marker location-marker"></span>
                Key Locations
            </div>
        `;
        return div;
    };
    
    legend.addTo(map);
}

// Handle map clicks
function onMapClick(e) {
    const lat = e.latlng.lat.toFixed(6);
    const lng = e.latlng.lng.toFixed(6);
    
    // Simulate property data lookup
    const mockData = {
        coordinates: [lat, lng],
        address: `Property near ${lat}, ${lng}`,
        landUse: 'General Urban (Simulated)',
        zoning: 'To be determined through full integration'
    };
    
    updatePropertyInfo(mockData);
    
    // Add temporary marker at clicked location
    if (window.tempMarker) {
        map.removeLayer(window.tempMarker);
    }
    
    window.tempMarker = L.marker(e.latlng)
        .addTo(map)
        .bindPopup(`
            <div style="font-family: system-ui;">
                <h4>Selected Location</h4>
                <p><strong>Coordinates:</strong><br>${lat}, ${lng}</p>
                <p><small>Property details will be available when connected to city database</small></p>
            </div>
        `)
        .openPopup();
}

// Update property information in sidebar
function updatePropertyInfo(data) {
    const propertyInfo = document.getElementById('property-info');
    if (!propertyInfo) return;
    
    propertyInfo.innerHTML = `
        <div class="property-details">
            <h3>Property Information</h3>
            <div class="info-item">
                <strong>Coordinates:</strong><br>
                ${data.coordinates[0]}, ${data.coordinates[1]}
            </div>
            <div class="info-item">
                <strong>Address:</strong><br>
                ${data.address}
            </div>
            <div class="info-item">
                <strong>Land Use:</strong><br>
                ${data.landUse}
            </div>
            <div class="info-item">
                <strong>Zoning:</strong><br>
                ${data.zoning}
            </div>
            <div class="info-note">
                <small>Note: Full OCP data integration coming in next phase</small>
            </div>
        </div>
    `;
}

// Navigation functions
function centerMap() {
    // ×ª××× ××××¨ ×××¨×× × ×× ×××¡×××× ×¡××¨
    map.setView(NEW_WESTMINSTER.center, 13);
}

function showDowntown() {
    const downtown = LOCATIONS.downtown;
    map.setView(downtown.coords, 15);
    
    // Find and open downtown marker popup
    currentMarkers.forEach(marker => {
        if (marker.getLatLng().equals(downtown.coords)) {
            marker.openPopup();
        }
    });
}

function showUptown() {
    const uptown = LOCATIONS.uptown;
    map.setView(uptown.coords, 15);
    
    // Find and open uptown marker popup
    currentMarkers.forEach(marker => {
        if (marker.getLatLng().equals(uptown.coords)) {
            marker.openPopup();
        }
    });
}

// Show location details in sidebar
function showLocationDetails(locationKey) {
    const location = LOCATIONS[locationKey];
    if (!location) return;
    
    updatePropertyInfo({
        coordinates: location.coords,
        address: location.name,
        landUse: location.description,
        zoning: 'Mixed-use development encouraged'
    });
}

// Placeholder functions for future features
function toggleLayers() {
    alert('Layer toggle feature coming soon!\n\nThis will allow you to show/hide:\nâ¢ Land use designations\nâ¢ Zoning boundaries\nâ¢ Transportation networks\nâ¢ Heritage sites');
}

function searchLocation() {
    const searchTerm = prompt('Search for a location in New Westminster:\n\n(Note: Full search functionality coming soon)');
    
    if (searchTerm) {
        alert(`Searching for: "${searchTerm}"\n\nFull address and policy search coming in next phase!`);
    }
}

// Error handling
function showMapError() {
    const mapContainer = document.getElementById('map');
    mapContainer.innerHTML = `
        <div class="map-loading">
            <h3>Map Loading Error</h3>
            <p>Unable to load the map. Please check your internet connection and refresh the page.</p>
            <button onclick="location.reload()" class="action-btn">Reload Page</button>
        </div>
    `;
}

// Initialize map when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('Initializing New Westminster OCP Explorer...');
    initializeMap();
});
